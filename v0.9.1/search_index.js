var documenterSearchIndex = {"docs":
[{"location":"run/cli/#How-to-run-Express-from-command-line","page":"How to run Express from command line","title":"How to run Express from command line","text":"","category":"section"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"To carry out a computation, first, users need to prepare the input files introduced in section \"Configuration files\". Then if the xps command is installed, run in terminal:","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"xps run eos.toml  # equation of state workflow\nxps run vdos.toml  # phonon workflow\nxps run qha.toml  # QHA workflow","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"As explained in \"Configuration files\", the file name (eos.toml, etc.) of the configuration file does not matter. It is the recipe field that determines the type of workflow.","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"It is often suggested to put the above commands in a script file with a header and submit it to a workload manager like Slurm. However, users can also request an interactive session and run code Julia REPL.","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"julia> using Express.EquationOfStateWorkflow.Recipes\n\njulia> using QuantumESPRESSOExpress\n\njulia> workflow = buildworkflow(\"eos.toml\");\n\njulia> run!(workflow);","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"For phonon and the QHA workflow, run using Express.PhononWorkflow.Recipes and using Express.QuasiHarmonicApproxWorkflow.Recipes in the first step.","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"In an EOS workflow, the final results include outputs returned by Quantum ESPRESSO, a list of raw data (volume-energy pairs), and a fitted EOS. If something goes wrong, the workflow might be terminated. The state of the workflow (i.e., the status of each job) and errors will be saved in a file for debugging. Once the bug is fixed, run xps run <path-to-config-file> again, and express will retry the failed jobs. To print either input or output data in a formatted, readable form, run","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"xps print <file-name>","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"where the allowed extensions of <file-name> are .jld2, .json, .yaml or .yml, and .toml. The last four extensions correspond to three human-readable data-serialization file formats, i.e., JSON, YAML, and TOML, while .jld2 is a binary serialization format only recognizable to Julia. For example,","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"xps print eos.toml\nxps print raw.json\nxps print eos.jld2","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"express can also plot some data, such as the fitted EOS applied to a certain range of volumes along with the raw data. The corresponding command is","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"xps plot <file-name>","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"where <file-name> refers to the EOS binary file with extension .jld2.","category":"page"},{"location":"run/cli/","page":"How to run Express from command line","title":"How to run Express from command line","text":"These are the three most important commands of express. These catchy commands cover all the functionalities we have promised, including but not limited to unit conversion, pseudopotential downloading, input validation and generation, calculation monitoring, task distribution, gathering and analysis of results, error handling, logging, and visualization. We hope they can facilitate tedious work as much as possible.","category":"page"},{"location":"run/configuration/#Configuration-files","page":"Configuration files","title":"Configuration files","text":"","category":"section"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"Express can be run from a configuration file, with some preset rules. The following sections introduce how to write such configuration files. By now, only YAML, JSON, and TOML formats are supported. Please refer their official documentation for their syntax. In the examples below, we will use YAML syntax for configuration files. But for readability purposes, we suggest users use the TOML syntax.","category":"page"},{"location":"run/configuration/#Fitting-equations-of-state","page":"Configuration files","title":"Fitting equations of state","text":"","category":"section"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"The configuration file for the EOS workflow has the following syntax:","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"recipe: A string that represents the type of the workflow. Allowed value is eos.\ntemplate: The path to a template input file for a specific software. It should be on the same file system where express is deployed.\ntrial_eos: The trial EOS contains initial values for input files generation and EOS fitting.\ntype: A string that represents the type of the EOS. Allowed values are murnaghan (Murnaghan), bm2 (Birch–Murnaghan second order), bm3, bm4, vinet (Vinet), pt2 (Poirier–Tarantola second order), pt3, and pt4.\nvalues: A vector of strings that specifies each value of the EOS. The default order is V_0, B_0, B_0(, B_0, etc.). Units must be provided.\nfixed:\npressures or volumes: Whether to fix pressures of volumes.\nvalues: Specify the pressures or volumes. It can be a vector of numbers, or a string with the syntax start:step:stop to form an arithmetic sequence where start, stop, and step are numbers indicating the start, the end, and the common difference of that sequence. See \"Creating arrays using range objects\" for more information.\nunit: The units of pressure or volume. The pressure and volume default units are GPa and angstrom^3. Allowed values for volumes are nm^3, angstrom^3, bohr^3, etc. Allowed values for pressures are Pa, GPa, TPa, ..., bar, kbar, ..., atm, and the combinations of eV, Ry, hartree, J, with any unit of volume.\nfiles:\ndirs: It specifies the paths of output directories.\nroot: The path of the root directory of output files.\npattern: A string specifying the naming convention of the output directories. Its default value is p=. For example, if fixed.pressures.values is a vector of pressures [10, 20, 30] which represents the relaxations are done from 10-30GPa, then the generated inputs and outputs will be stored in directories p=10, p=20 and p=30.\nsave:\nstatus: The path to a binary file that stores the status of the workflow.\neos: The path to a binary file that stores the fitted equations of state.\ncli:\nmpi: The configurations of the MPI software.\nnp: An integer indicating the number of processors/cores/CPUs used.","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"The code block below shows a typical configuration file for an EOS workflow in the YAML syntax:","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"recipe: eos\ncli:\n  mpi:\n    np: 16\ntemplate: template.in\nsave:\n  status: status.jld2\nfixed:\n  pressures:\n    unit: GPa\n    values:\n      - -5\n      - -2\n      - 0\n      - 5\n      - 10\n      - 15\n      - 17\n      - 20\ntrial_eos:\n  type: bm3\n  values:\n    - 300.44 bohr^3\n    - 74.88 GPa\n    - 4.82","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"The JSON and TOML equivalents of the above file are:","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"{\n  \"recipe\": \"eos\",\n  \"cli\": {\n    \"mpi\": {\n      \"np\": 16\n    }\n  },\n  \"template\": \"template.in\",\n  \"save\": {\n    \"status\": \"status.jld2\"\n  },\n  \"fixed\": {\n    \"pressures\": {\n      \"unit\": \"GPa\",\n      \"values\": [-5, -2, 0, 5, 10, 15, 17, 20]\n    }\n  },\n  \"trial_eos\": {\n    \"type\": \"bm3\",\n    \"values\": [\"300.44 bohr^3\", \"74.88 GPa\", 4.82]\n  }\n}","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"recipe = 'eos'\ntemplate = 'template.in'\n[fixed.pressures]\nunit = 'GPa'\nvalues = [-5, -2, 0, 5, 10, 15, 17, 20]\n\n[trial_eos]\ntype = 'bm3'\nvalues = ['300.44 bohr^3', '74.88 GPa', 4.82]\n[cli.mpi]\nnp = 16\n\n[save]\nstatus = 'status.jld2'","category":"page"},{"location":"run/configuration/#Phonon-density-of-states-or-phonon-dispersion-relation","page":"Configuration files","title":"Phonon density of states or phonon dispersion relation","text":"","category":"section"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"The configuration file for the phonon workflow has the following syntax:","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"recipe: A string that represents the type of the workflow. Allowed values are phonon dispersion (phonon dispersion along a q-path) and vdos (phonon density of states).\ntemplate:\nscf: The path to a template input file for an SCF calculation.\ndfpt: The path to a template input file for a DFPT calculation.\nq2r: The path to a template input file for a Fourier transform.\ndisp: The path to a template input file for a phonon dispersion/phonon density of states calculation.\nfixed:\npressures or volumes: Whether to fix pressures of volumes.\nvalues: Specify the pressures or volumes. It can be a vector of numbers, or a string with the syntax start:step:stop to form an arithmetic sequence where start, stop, and step are numbers indicating the start, the end, and the common difference of that sequence. See \"Creating arrays using range objects\" for more information.\nunit: The units of pressure or volume. The pressure and volume default units are GPa and angstrom^3. Allowed values for volumes are nm^3, angstrom^3, bohr^3, etc. Allowed values for pressures are Pa, GPa, TPa, ..., bar, kbar, ..., atm, and the combinations of eV, Ry, hartree, J, with any unit of volume.\nfiles:\ndirs: It specifies the paths of output directories.\nroot: The path of the root directory of output files.\npattern: A string specifying the naming convention of the output directories. Its default value is p=. For example, if fixed.pressures.values is a vector of pressures [10, 20, 30] which represents the relaxations are done from 10-30GPa, then the generated inputs and outputs will be stored in directories p=10, p=20 and p=30.\nsave:\nstatus: The path to a binary file that stores the status of the workflow.\ncli:\nmpi: The configurations of the MPI software.\nnp: An integer indicating the number of processors/cores/CPUs used.","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"The code block below shows a typical configuration file for a phonon workflow in the YAML syntax:","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"recipe: vdos\ncli:\n  mpi:\n    np: 16\ntemplate:\n  scf: template.in\n  dfpt: ph.in\n  q2r: q2r.in\n  disp: disp.in\nsave:\n  status: status.jld2\nfixed:\n  pressures:\n    unit: GPa\n    values:\n      - -5\n      - -2\n      - 0\n      - 5\n      - 10\n      - 15\n      - 17\n      - 20","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"The JSON and TOML equivalents of the above file are:","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"{\n  \"recipe\": \"vdos\",\n  \"cli\": {\n    \"mpi\": {\n      \"np\": 16\n    }\n  },\n  \"template\": {\n    \"scf\": \"template.in\",\n    \"dfpt\": \"ph.in\",\n    \"q2r\": \"q2r.in\",\n    \"disp\": \"disp.in\"\n  },\n  \"save\": {\n    \"status\": \"status.jld2\"\n  },\n  \"fixed\": {\n    \"pressures\": {\n      \"unit\": \"GPa\",\n      \"values\": [-5, -2, 0, 5, 10, 15, 17, 20]\n    }\n  }\n}","category":"page"},{"location":"run/configuration/","page":"Configuration files","title":"Configuration files","text":"recipe = 'vdos'\n[cli.mpi]\nnp = 16\n\n[template]\ndfpt = 'ph.in'\ndisp = 'disp.in'\nq2r = 'q2r.in'\nscf = 'template.in'\n[fixed.pressures]\nunit = 'GPa'\nvalues = [-5, -2, 0, 5, 10, 15, 17, 20]\n\n[save]\nstatus = 'status.jld2'","category":"page"},{"location":"run/jobs/#Tracking-and-monitoring-jobs-in-a-workflow","page":"Tracking and monitoring jobs in a workflow","title":"Tracking and monitoring jobs in a workflow","text":"","category":"section"},{"location":"run/jobs/","page":"Tracking and monitoring jobs in a workflow","title":"Tracking and monitoring jobs in a workflow","text":"Tracking job status, input parameters, and output results manually are time-consuming and error-prone. In Express.jl, each job's unique ID, start time, stop time, status (whether it succeeded, failed, is running or pending), in the workflow are stored in a database for future reference or sharing information with colleagues.","category":"page"},{"location":"run/jobs/","page":"Tracking and monitoring jobs in a workflow","title":"Tracking and monitoring jobs in a workflow","text":"This database is a DataFrame object implemented by DataFrames.jl. It supports all operations that a DataFrame permits, including listing, sorting, filtering, and modifying. Users can interact with it directly in Julia (Please see its documentation for more information.).","category":"page"},{"location":"run/jobs/","page":"Tracking and monitoring jobs in a workflow","title":"Tracking and monitoring jobs in a workflow","text":"The database can also be stored in a file for future reference or sharing information with colleagues.","category":"page"},{"location":"run/jobs/","page":"Tracking and monitoring jobs in a workflow","title":"Tracking and monitoring jobs in a workflow","text":"julia> using SimpleWorkflows, Serialization\n\njulia> queue()\n\njulia> serialize(\"table.jls\", queue())","category":"page"},{"location":"run/jobs/","page":"Tracking and monitoring jobs in a workflow","title":"Tracking and monitoring jobs in a workflow","text":"(Image: )","category":"page"},{"location":"developers/contributing/#contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Pages = [\"contributing.md\"]","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Welcome! This document explains some ways you can contribute to Express.","category":"page"},{"location":"developers/contributing/#Code-of-conduct","page":"Contributing","title":"Code of conduct","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"This project and everyone participating in it is governed by the \"Contributor Covenant Code of Conduct\". By participating, you are expected to uphold this code.","category":"page"},{"location":"developers/contributing/#Join-the-community-forum","page":"Contributing","title":"Join the community forum","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"First up, join the community forum.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The forum is a good place to ask questions about how to use Express. You can also use the forum to discuss possible feature requests and bugs before raising a GitHub issue (more on this below).","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Aside from asking questions, the easiest way you can contribute to Express is to help answer questions on the forum!","category":"page"},{"location":"developers/contributing/#Improve-the-documentation","page":"Contributing","title":"Improve the documentation","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Chances are, if you asked (or answered) a question on the community forum, then it is a sign that the documentation could be improved. Moreover, since it is your question, you are probably the best-placed person to improve it!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The docs are written in Markdown and are built using Documenter.jl. You can find the source of all the docs here.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"If your change is small (like fixing typos, or one or two sentence corrections), the easiest way to do this is via GitHub's online editor. (GitHub has help on how to do this.)","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"If your change is larger, or touches multiple files, you will need to make the change locally and then use Git to submit a pull request. (See Contribute code to Express below for more on this.)","category":"page"},{"location":"developers/contributing/#File-a-bug-report","page":"Contributing","title":"File a bug report","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Another way to contribute to Express is to file bug reports.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Make sure you read the info in the box where you write the body of the issue before posting. You can also find a copy of that info here.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf you're unsure whether you have a real bug, post on the community forum first. Someone will either help you fix the problem, or let you know the most appropriate place to open a bug report.","category":"page"},{"location":"developers/contributing/#Contribute-code-to-Express","page":"Contributing","title":"Contribute code to Express","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Finally, you can also contribute code to Express!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nIf you do not have experience with Git, GitHub, and Julia development, the first steps can be a little daunting. However, there are lots of tutorials available online, including:GitHub\nGit and GitHub\nGit\nJulia package development","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once you are familiar with Git and GitHub, the workflow for contributing code to Express is similar to the following:","category":"page"},{"location":"developers/contributing/#Step-1:-decide-what-to-work-on","page":"Contributing","title":"Step 1: decide what to work on","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The first step is to find an open issue (or open a new one) for the problem you want to solve. Then, before spending too much time on it, discuss what you are planning to do in the issue to see if other contributors are fine with your proposed changes. Getting feedback early can improve code quality, and avoid time spent writing code that does not get merged into Express.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nAt this point, remember to be patient and polite; you may get a lot of comments on your issue! However, do not be afraid! Comments mean that people are willing to help you improve the code that you are contributing to Express.","category":"page"},{"location":"developers/contributing/#Step-2:-fork-Express","page":"Contributing","title":"Step 2: fork Express","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Go to https://github.com/MineralsCloud/Express.jl and click the \"Fork\" button in the top-right corner. This will create a copy of Express under your GitHub account.","category":"page"},{"location":"developers/contributing/#Step-3:-install-Express-locally","page":"Contributing","title":"Step 3: install Express locally","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Similar to installation, open the Julia REPL and run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.update()\nPkg.develop(\"Express\")","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Then the package will be cloned to your local machine. On *nix systems, the default path is ~/.julia/dev/Express unless you modify the JULIA_DEPOT_PATH environment variable. If you're on Windows, this will be C:\\\\Users\\\\<my_name>\\\\.julia\\\\dev\\\\Express. In the following text, we will call it PKGROOT.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Go to PKGROOT, start a new Julia session and run","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.instantiate()","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"to instantiate the project.","category":"page"},{"location":"developers/contributing/#Step-4:-checkout-a-new-branch","page":"Contributing","title":"Step 4: checkout a new branch","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIn the following, replace any instance of GITHUB_ACCOUNT with your GitHub username.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"The next step is to checkout a development branch. In a terminal (or command prompt on Windows), run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd ~/.julia/dev/Express\n\ngit remote add GITHUB_ACCOUNT https://github.com/GITHUB_ACCOUNT/Express.jl.git\n\ngit checkout master  # or main\n\ngit pull\n\ngit checkout -b my_new_branch","category":"page"},{"location":"developers/contributing/#Step-5:-make-changes","page":"Contributing","title":"Step 5: make changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Now make any changes to the source code inside the ~/.julia/dev/Express directory.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Make sure you:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Follow the Style guide and run JuliaFormatter.jl\nAdd tests and documentation for any changes or new features","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nWhen you change the source code, you'll need to restart Julia for the changes to take effect. This is a pain, so install Revise.jl.","category":"page"},{"location":"developers/contributing/#Step-6a:-test-your-code-changes","page":"Contributing","title":"Step 6a: test your code changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"To test that your changes work, run the Express test-suite by opening Julia and running:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd(\"~/.julia/dev/Express\")\nusing Pkg\nPkg.activate(\".\")\nPkg.test()","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nRunning the tests might take a long time.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf you're using Revise.jl, you can also run the tests by calling include:include(\"test/runtests.jl\")This can be faster if you want to re-run the tests multiple times.","category":"page"},{"location":"developers/contributing/#Step-6b:-test-your-documentation-changes","page":"Contributing","title":"Step 6b: test your documentation changes","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Open Julia, then run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd(\"~/.julia/dev/Express/docs\")\nusing Pkg\nPkg.activate(\".\")\ninclude(\"src/make.jl\")","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"After a while, a folder PKGROOT/docs/build will appear. Open PKGROOT/docs/build/index.html with your favorite browser, and have fun!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"warning: Warning\nBuilding the documentation might take a long time.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"tip: Tip\nIf there's a problem with the tests that you don't know how to fix, don't worry. Continue to step 5, and one of the Express contributors will comment on your pull request telling you how to fix things.","category":"page"},{"location":"developers/contributing/#Step-7:-make-a-pull-request","page":"Contributing","title":"Step 7: make a pull request","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once you've made changes, you're ready to push the changes to GitHub. Run:","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd ~/.julia/dev/Express\n\ngit add .\n\ngit commit -m \"A descriptive message of the changes\"\n\ngit push -u GITHUB_ACCOUNT my_new_branch","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Then go to https://github.com/MineralsCloud/Express.jl/pulls and follow the instructions that pop up to open a pull request.","category":"page"},{"location":"developers/contributing/#Step-8:-respond-to-comments","page":"Contributing","title":"Step 8: respond to comments","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"At this point, remember to be patient and polite; you may get a lot of comments on your pull request! However, do not be afraid! A lot of comments means that people are willing to help you improve the code that you are contributing to Express.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"To respond to the comments, go back to step 5, make any changes, test the changes in step 6, and then make a new commit in step 7. Your PR will automatically update.","category":"page"},{"location":"developers/contributing/#Step-9:-cleaning-up","page":"Contributing","title":"Step 9: cleaning up","text":"","category":"section"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Once the PR is merged, clean-up your Git repository ready for the next contribution!","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"cd ~/.julia/dev/Express\n\ngit checkout master\n\ngit pull","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIf you have suggestions to improve this guide, please make a pull request! It's particularly helpful if you do this after your first pull request because you'll know all the parts that could be explained better.","category":"page"},{"location":"developers/contributing/","page":"Contributing","title":"Contributing","text":"Thanks for contributing to Express!","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"This page collects some possible errors you may encounter and trick how to fix them. If you have some questions about how to use this code, you are welcome to discuss with us.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you have additional tips, please either report an issue or submit a PR with suggestions.","category":"page"},{"location":"troubleshooting/#Installation-problems","page":"Troubleshooting","title":"Installation problems","text":"","category":"section"},{"location":"troubleshooting/#I-cannot-find-the-julia-executable","page":"Troubleshooting","title":"I cannot find the julia executable","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Make sure you have Julia installed in your environment. Please download the latest stable version for your platform. If you are using a *nix system, the recommended way is to use juliaup. If you do not want to install juliaup or you are using other platforms that Julia supports, download the corresponding binaries. Then, create a symbolic link to the Julia executable. If the path is not in your $PATH environment variable, export it to your $PATH.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Some clusters, like Habanero, Comet, or Expanse, already have Julia installed as a module, you may just module load julia to use it. If not, either install by yourself or contact your administrator.","category":"page"},{"location":"troubleshooting/#Have-trouble-installing-[qha](https://github.com/MineralsCloud/qha)","page":"Troubleshooting","title":"Have trouble installing qha","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you are seeing error message like this:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"ERROR: LoadError: InitError: PyError (PyImport_ImportModule\n\nThe Python package qha could not be imported by pyimport. Usually this means\nthat you did not install qha in the Python version being used by PyCall.\n\nPyCall is currently configured to use the Python version at:\n\n/usr/bin/python3\n\nand you should use whatever mechanism you usually use (apt-get, pip, conda,\netcetera) to install the Python package containing the qha module.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"It is because on some operating systems, python is already installed, and Julia selects it as the default binary. But that python cannot install third-party Python packages. So qha cannot be automatically installed by Julia.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"One solution is to re-configure PyCall to use a different Python version on your system: set ENV[\"PYTHON\"] to the path of the python executable you want to use, run Pkg.build(\"PyCall\"), and re-launch Julia. For example, in the Julia REPL, run","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia> using Pkg\n\njulia> ENV[\"PYTHON\"] = \"... path of the python executable ...\"\n# ENV[\"PYTHON\"] = raw\"C:\\Python37-x64\\python.exe\" # example for Windows, \"raw\" to not have to escape: \"C:\\\\Python37-x64\\\\python.exe\"\n# ENV[\"PYTHON\"] = \"/usr/bin/python3.7\"            # example for *nix\n\njulia> Pkg.add(\"PyCall\");\n\njulia> Pkg.build(\"PyCall\");","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Please see this part for more detailed instructions.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Another solution is to configure PyCall to use a Julia-specific Python distribution via the Conda.jl package (which installs a private Anaconda Python distribution), which has the advantage that packages can be installed and kept up-to-date via Julia. As explained in the PyCall documentation, in Julia, run","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"using Pkg\nENV[\"PYTHON\"] = \"\"  # empty string\nPkg.add(\"PyCall\")\nPkg.build(\"PyCall\");","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Then re-launch Julia.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If qha still cannot be installed, go to the Python binary directory you specified (for the second solution, go to $JULIA_DEPOT_PATH/conda/3/bin) and run the following command","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"./pip install qha","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"note: Note\nAt least Python 3.6 and above is required to install qha. Please read its manual for more information.","category":"page"},{"location":"troubleshooting/#Loading-settings","page":"Troubleshooting","title":"Loading settings","text":"","category":"section"},{"location":"troubleshooting/#Error-parsing-YAML-files","page":"Troubleshooting","title":"Error parsing YAML files","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you encounter","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"ERROR: expected '<document start>' but found YAML.BlockMappingStartToken at nothing","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"or","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"ERROR: while scanning a simple key at line n, column 0: could not find expected ':' at line n+1, column 0","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check whether you have no space between the YAML key and its value like key:1 or key:some text, etc. To correct, change to key: 1, key: some text, etc. Otherwise, check other YAML syntax you may have broken.","category":"page"},{"location":"troubleshooting/#Loading-Express","page":"Troubleshooting","title":"Loading Express","text":"","category":"section"},{"location":"troubleshooting/#Why-is-Julia-compiling/loading-modules-so-slow?-What-can-I-do?","page":"Troubleshooting","title":"Why is Julia compiling/loading modules so slow? What can I do?","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"First, we recommend you download the latest version of Julia. Usually, the newest version has the best performance.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you just want Julia to do a simple task and only once, you could start the Julia REPL with","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --compile=min","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"to minimize compilation or","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --optimize=0","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"to minimize optimizations, or just use both. Or you could make a system image and run with","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"julia --sysimage custom-image.so","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"See Fredrik Ekre's talk for details.","category":"page"},{"location":"troubleshooting/#Running-workflows","page":"Troubleshooting","title":"Running workflows","text":"","category":"section"},{"location":"troubleshooting/#How-to-solve-the-error-come-across-ProcessFailedException?","page":"Troubleshooting","title":"How to solve the error come across ProcessFailedException?","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"The reasons for this error are manifold. One common reason is that express did not find the executables of Quantum ESPRESSO or mpiexec (e.g., their parent directory is not in the PATH environment variable) or the template input files. If so, please specify the paths to these executables in the absolute path format:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"cli:\n  mpi:\n    np: 64\n    path: /usr/local/bin/gcc-10.2.0/openmpi/bin/mpiexec\n  pw:\n    path: /usr/local/bin/gcc-9.2.0/qe-6.5/bin/pw.x\n  ph:\n    path: /usr/local/bin/gcc-9.2.0/qe-6.5/bin/ph.x\n  q2r:\n    path: /usr/local/bin/gcc-9.2.0/qe-6.5/bin/q2r.x\n  matdyn:\n    path: /usr/local/bin/gcc-9.2.0/qe-6.5/bin/matdyn.x\ntemplate:\n  scf: /home/qe/template.in\n  dfpt: /home/qe/ph.in\n  q2r: /home/qe/q2r.in\n  disp: /home/qe/phdos.in","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Besides, the paths to the directories in the template files could also be absolute to avoid unexpected errors:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"&CONTROL\n  verbosity = 'high'\n  tstress = .true.\n  tprnfor = .true.\n  outdir = '/home/qe/temp'\n  prefix = 'Ge'\n  disk_io = 'high'\n  pseudo_dir = '/home/qe/pseudo'\n/","category":"page"},{"location":"troubleshooting/#How-to-solve-EOFError:-read-end-of-file?","page":"Troubleshooting","title":"How to solve EOFError: read end of file?","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If it happens when you run","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"wf = buildworkflow(\"workflow.yaml\")\nrun!(wf)","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check the value of the key status in the save dictionary in workflow.yaml:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"save:\n  status: status.jld2","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Then delete the file status.jld2 and retry running run!(wf).","category":"page"},{"location":"troubleshooting/#Why-does-buildworkflow-return-the-same-Workflow-object-if-I-am-starting-a-new-workflow?","page":"Troubleshooting","title":"Why does buildworkflow return the same Workflow object if I am starting a new workflow?","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"This happens when running a workflow (say, a phonon workflow, for example) followed by a workflow (an equation of state workflow in this case). And after the following Julia commands:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"using Express.PhononWorkflow.Recipes\nusing QuantumESPRESSOExpress\n\nwf = buildworkflow(\"phonon.yaml\")","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"you will find that wf still contains the jobs from the previous workflow, and they are probably all succeeded (because that is when you want to run the next workflow). The cause is likely in your configuration file (phonon.yaml). You probably have the following setting:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"save:\n  status: status.jld2","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"where the status.jld2 already exists and is the serialized Workflow object saved from the previous (equation of state) workflow. Express.jl will first load this file if it exists. To fix this, change the value of the status key to another path.","category":"page"},{"location":"troubleshooting/#How-to-solve-the-LoadError:-Only-one-AND-undecorated-format-string-is-allowed?","page":"Troubleshooting","title":"How to solve the LoadError: Only one AND undecorated format string is allowed?","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"The probable reason for the error is that you changed the values of files.dirs.pattern, files.pattern.input, and files.pattern.output in the configuration file (their default values are \"p=%.1f\", \"%s.in\", and \"%s.out\") to some strings with more than one C-style format specifiers (such as \"p=%d%d\").","category":"page"},{"location":"troubleshooting/#Miscellaneous-errors","page":"Troubleshooting","title":"Miscellaneous errors","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you see the following error message\njulia> w = buildworkflow(\"eos.toml\");\nERROR: MethodError: Cannot `convert` an object of type Dict{String, Any} to an object of type AbInitioSoftwareBase.Commands.CommandConfig\nClosest candidates are:\n  convert(::Type{T}, ::Intervals.AnchoredInterval{P, T}) where {P, T} at ~/.julia/packages/Intervals/ua9cq/src/anchoredinterval.jl:181\n  convert(::Type{T}, ::Intervals.Interval{T}) where T at ~/.julia/packages/Intervals/ua9cq/src/interval.jl:253\n  convert(::Type{T}, ::P) where {T, P<:(Polynomials.AbstractPolynomial{T})} at ~/.julia/packages/Polynomials/WvTSC/src/common.jl:434\n  ...\nThen you probably forget loading a plugin package for Express.jl. For example, you should run\njulia> using QuantumESPRESSOExpress\nto fix this error.","category":"page"},{"location":"installation/#installation","page":"Installation guide","title":"Installation guide","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Here are the installation instructions for package Express. If you have trouble installing it, please refer to our Troubleshooting page for more information.","category":"page"},{"location":"installation/#Install-Julia","page":"Installation guide","title":"Install Julia","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"First, you should install Julia. We recommend downloading it from its official website. Please follow the detailed instructions on its website if you have to build Julia from source. Some computing centers provide preinstalled Julia. Please contact your administrator for more information in that case. Here's some additional information on how to set up Julia on HPC systems.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"If you have Homebrew installed, open Terminal.app and type","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"brew install julia","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"to install it as a formula.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"If you are also using macOS and want to install it as a prebuilt binary app, type","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"brew install --cask julia","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"instead.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"If you want to install multiple Julia versions in the same operating system, a recommended way is to use a version manager such as juliaup. First, install juliaup. Then, run","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"juliaup add release\njuliaup default release","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"to configure the julia command to start the latest stable version of Julia (this is also the default value).","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"There is a short video introduction to juliaup made by its authors.","category":"page"},{"location":"installation/#Which-version-should-I-pick?","page":"Installation guide","title":"Which version should I pick?","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"You can install the \"Current stable release\" or the \"Long-term support (LTS) release\".","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"The \"Current stable release\" is the latest release of Julia. It has access to newer features, and is likely faster.\nThe \"Long-term support release\" is an older version of Julia that has continued to receive bug and security fixes. However, it may not have the latest features or performance improvements.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"For most users, you should install the \"Current stable release\", and whenever Julia releases a new version of the current stable release, you should update your version of Julia. Note that any code you write on one version of the current stable release will continue to work on all subsequent releases.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"For users in restricted software environments (e.g., your enterprise IT controls what software you can install), you may be better off installing the long-term support release because you will not have to update Julia as frequently.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Versions higher than v1.3, especially v1.6, are strongly recommended. This package may not work on v1.0 and below. Since the Julia team has set v1.6 as the LTS release, we will gradually drop support for versions below v1.6.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Julia and Julia packages support multiple operating systems and CPU architectures; check this table to see if it can be installed on your machine. For Mac computers with M-series processors, this package and its dependencies may not work. Please install the Intel-compatible version of Julia (for macOS x86-64) if any platform-related error occurs.","category":"page"},{"location":"installation/#Install-Express","page":"Installation guide","title":"Install Express","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Now I am using macOS as a standard platform to explain the following steps:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Open Terminal.app, and type julia to start an interactive session (known as the REPL).\nRun the following commands and wait for them to finish:\njulia> using Pkg\n\njulia> Pkg.update()\n\njulia> Pkg.add(\"Express\")\nRun\njulia> using Express\nand have fun!\nWhile using, please keep this Julia session alive. Restarting might cost some time.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"If you want to install the latest in-development (probably buggy) version of Express, type","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"using Pkg\nPkg.update()\npkg\"add https://github.com/MineralsCloud/Express.jl\"","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"in the second step above.","category":"page"},{"location":"installation/#Update-Express","page":"Installation guide","title":"Update Express","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Please watch our GitHub repository for new releases. Once we release a new version, you can update Express by typing","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"using Pkg\nPkg.update(\"Express\")\nPkg.gc()","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"in the Julia REPL.","category":"page"},{"location":"installation/#Uninstall-and-reinstall-Express","page":"Installation guide","title":"Uninstall and reinstall Express","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Sometimes errors may occur if the package is not properly installed. In this case, you may want to uninstall and reinstall the package. Here is how to do that:","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"To uninstall, in a Julia session, run\njulia> using Pkg\n\njulia> Pkg.rm(\"Express\")\n\njulia> Pkg.gc()\nPress ctrl+d to quit the current session. Start a new Julia session and reinstall Express.","category":"page"},{"location":"installation/#Install-a-plugin-for-express","page":"Installation guide","title":"Install a plugin for express","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"Plugins are packages that handle ab initio software such as Quantum ESPRESSO in the express framework. The current plugin is QuantumESPRESSOExpress. To install QuantumESPRESSOExpress.jl, run","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"using Pkg\nPkg.update()\nPkg.add(\"QuantumESPRESSOExpress\")","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"in the Julia REPL.","category":"page"},{"location":"installation/#cli","page":"Installation guide","title":"Install command-line tools","text":"","category":"section"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"We provide a command-line interface of express for non-developers: ExpressCommands.jl. It installs an executable 'xps' that can execute code from configuration files provided by users. To install ExpressCommands, run","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"using Pkg\nPkg.update()\nPkg.add(\"ExpressCommands\")","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"in the Julia REPL.","category":"page"},{"location":"installation/","page":"Installation guide","title":"Installation guide","text":"After installation, the path to xps is $HOME/.julia/bin/xps by default. So please add $HOME/.julia/bin to your $PATH environment variable.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Express","category":"page"},{"location":"#Express:-an-extensible,-lightweight,-high-throughput,-high-level-workflow-framework-that-aims-to-automate-*ab-initio*-calculations","page":"Home","title":"Express: an extensible, lightweight, high-throughput, high-level workflow framework that aims to automate ab initio calculations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Express.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The code is hosted on GitHub, with some continuous integration services to test its validity.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This repository is created and maintained by @singularitti. You are very welcome to contribute.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Express is an extensible, high-throughput, high-level workflow framework that aims to automate ab initio calculations for the materials science community. Express is shipped with well-tested workflow templates, including structure optimization, equation of state (EOS) fitting, phonon spectrum (lattice dynamics) calculation, and thermodynamic property calculation in the framework of the quasi-harmonic approximation (QHA). It is designed to be highly modularized so that its components can be reused across various occasions, and customized workflows can be built on top of that.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The differences between express and Express: express is the project's name, it is a collection of Julia packages. Its core is Express.jl, managing and dispatching the rest packages. Express is short for Express.jl, which is the most important component of express. The direct components of express are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: components)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Express.jl provides a high-level interface to all the workflows, including file reading and writing, job creation, submission, monitoring, result retrieving, and data analysis. To work with specific software, install the corresponding plugin, e.g., QuantumESPRESSOExpress.jl for Quantum ESPRESSO.\nExpressCommands.jl is a user-friendly command-line interface of Express.jl for non-developers. It installs an executable 'xps' that can execute code from configuration files provided by users.\nEquationsOfStateOfSolids.jl fits energy (or pressure) vs. volume results to equations of state, etc. These features are repetitively used in the equation of state workflow.\nCrystallography.jl calculates a crystal's primitive cell (or supercell) volume from lattice parameters, finds symmetry operations and generates high symmetry points in the Brillouin zone, etc.\nPyQHA.jl is a Julia wrapper of the Python qha package, which can calculate several thermodynamic properties of both single- and multi-configuration crystalline materials in the framework of quasi-harmonic approximation (QHA). The qha code is the foundation of the QHA workflow.\nGeotherm.jl is a Julia interpretation of the Fortran code we used in this paper, which calculates the isentropic temperature/pressure gradient (geotherm) using thermodynamic properties obtained with the QHA workflow.\nPseudopotentials.jl presents a database for storing and querying pseudopotentials used in ab initio calculations.\nSimpleWorkflows.jl is the skeleton of the workflow system, which defines building blocks, composition rules, and operation order of workflows.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The QuantumESPRESSOExpress.jl is a special type of package called \"plugin of express\" for handling ab initio software such as Quantum ESPRESSO. Other plugins for other software are possible. The dependencies of QuantumESPRESSOExpress.jl are listed below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"AbInitioSoftwareBase.jl provides a standard API for some popular ab initio software such as Quantum ESPRESSO.\nQuantumESPRESSOBase.jl declares basic data types and methods for manipulating crystal structures, generating input files for Quantum ESPRESSO, error checking before running, etc.\nQuantumESPRESSOParser.jl parses the input or output files of Quantum ESPRESSO to extract and analyze data.\nQuantumESPRESSOFormatter.jl formats the input files of Quantum ESPRESSO.\nQuantumESPRESSOCommands.jl is a command-line interface that exports the commands Quantum ESPRESSO uses in a configurable way.\nQuantumESPRESSO.jl is simply a wrapper of the types, methods, and commands defined in QuantumESPRESSOBase.jl, QuantumESPRESSOParser.jl, QuantumESPRESSOFormatter.jl, and QuantumESPRESSOCommands.jl under a common namespace.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add Express","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or, equivalently, via the Pkg API:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg; Pkg.add(\"Express\")","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"STABLE — documentation of the most recently tagged version.\nDEV — documentation of the in-development version.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here is a video introduction to this code:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Watch the video)","category":"page"},{"location":"#Project-status","page":"Home","title":"Project status","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is tested against, and being developed for, Julia 1.6 and above on Linux, macOS, and Windows.","category":"page"},{"location":"#Questions-and-contributions","page":"Home","title":"Questions and contributions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Usage questions can be posted on our discussion page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contributions are very welcome, as are feature requests and suggestions. Please open an issue if you encounter any problems. The contributing page has a few guidelines that should be followed when opening pull requests and contributing code.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"installation.md\",\n    \"run/configuration.md\",\n    \"run/cli.md\",\n    \"run/jobs.md\",\n    \"developers/contributing.md\",\n    \"developers/style.md\",\n    \"troubleshooting.md\",\n    \"faq.md\",\n]\nDepth = 3","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = []","category":"page"},{"location":"#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = []","category":"page"},{"location":"faq/#FAQ","page":"FAQ","title":"FAQ","text":"","category":"section"},{"location":"faq/#What-is-the-difference-between-Express-and-express?","page":"FAQ","title":"What is the difference between Express and express?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"express is the workflow framework's name, while Express is the short form of Express.jl, the Julia implementation of express. We do not want the project's name linked to a specific programming language: who says we cannot have a Python version of express in the future?","category":"page"},{"location":"faq/#Why-do-you-create-express?","page":"FAQ","title":"Why do you create express?","text":"","category":"section"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"Those projects are of very high quality and are de facto standards of the materials simulation community. They have much larger teams and longer history than us, so it is unrealistic to say we are better than them in every aspect in the first few releases of express. However, it does not mean we cannot have our features or advantages. Our code is better at modularity, extensibility, and readability.","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"First, some packages only implement workflows for specific software. By far, Quantum ESPRESSO is only supported by a few packages. Considering the number of users in the Quantum ESPRESSO community (1000-2000 citations per year), there is a great need for an advanced and eclectic workflow ecosystem.","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"Second, most of their effort is put into dealing with servers, networks, databases, web interfaces, file formats, etc., while the code's core logic takes up only a small part, leaving gigantic packages that are hard to understand and integrate into users' code. On the contrary, express is a highly modularized collection of packages, with each of them providing a succinct, almost independent, complete set of functionalities frequently used in materials modeling. Inside each package, every type and function are also loosely coupled. Users can pick up pieces of our code and incorporate them into theirs effortlessly. It is also possible for users to build customized workflows. In fact, each workflow in Express.jl is just a collection of predefined wrappers of functions provided by its dependencies. Part of the express project can be installed and used if necessary. For example, Pseudopotentials.jl, Crystallography.jl, EquationsOfStateOfSolids.jl, and QuantumESPRESSO.jl, are distinct packages. They can work together to form the equation of state workflow. They can also work separately, such as managing pseudopotentials, calculating structural symmetry, fitting existing data.","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"In addition, many packages mentioned above are implemented in Python, a convenient language when building a prototype project but not the most convenient one when developing a large project due to readability and performance issues (For this reason, Dropbox, Inc. is writing a static type checker mypy to make large Python programs easier to read, and people are working on a faster Python implementation called PyPy.). However, Julia has built-in support for type annotations, making it extremely readable and performant. Namely, it is easy to write generic Julia code without losing performance. Another benefit of using Julia is good compatibility between codebases. Because of its multimethods feature, different Julia packages usually just \"magically\" work together. For example, our users never need to convert units. With the help of Unitful.jl, we can always write literal units obtained from experiments and do not need to consider whether they are the same or not. This is helpful when fitting equations of state, modifying crystal structures, etc. We usually do not have such flexibility in other languages, including Python, where sometimes wrapper code is needed. From the developers' perspectives, we seldom need to adapt to others' code. From the users' perspectives, they can use customized data structures without worrying about code incompatibility.","category":"page"},{"location":"faq/","page":"FAQ","title":"FAQ","text":"At last, some of the workflows we shipped in express are uniquely developed by us. See the introduction of the qha package, which can calculate quasiharmonic free energy for multi-configuration systems. We also have some workflows that will be integrated into express shortly, including but not limited to, the phonon gas model workflow that was used to calculate thermodynamic properties of ε-Fe with thermal electronic excitation effects on vibrational spectra, and the thermoelasticity workflow based on the Wu–Wentzcovitch semi-analytical method (SAM).","category":"page"},{"location":"developers/style/#style","page":"Style Guide","title":"Style guide and design principles","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Pages = [\"style.md\"]","category":"page"},{"location":"developers/style/#Style-guide","page":"Style Guide","title":"Style guide","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"This section describes the coding style rules that apply to our code and that we recommend you to use it also.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"In some cases, our style guide diverges from the Julia style guide (Please read it!). All such cases will be explicitly noted and justified.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Our style guide adopts many recommendations from the Blue style guide.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Please read the Blue style guide before contributing to this package. If not following, your pull requests may not be accepted.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"info: Info\nThe style guide is always a work in progress, and not all Express code follows the rules. When modifying Express, please fix the style violations of the surrounding code (i.e., leave the code tidier than when you started). If large changes are needed, consider separating them into another pull request.","category":"page"},{"location":"developers/style/#formatter","page":"Style Guide","title":"Run JuliaFormatter","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Express uses JuliaFormatter as an auto-formatting tool.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"We use the options contained in .JuliaFormatter.toml.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"To format your code, cd to the Express directory, then run:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"using Pkg\nPkg.add(\"JuliaFormatter\")\nusing JuliaFormatter: format\nformat(\"docs\")\nformat(\"src\")\nformat(\"test\")","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"info: Info\nA continuous integration check verifies that all PRs made to Express have passed the formatter.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"The following sections outline extra style guide points that are not fixed automatically by JuliaFormatter.","category":"page"},{"location":"developers/style/#Use-the-Julia-extension-for-Visual-Studio-Code","page":"Style Guide","title":"Use the Julia extension for Visual Studio Code","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Please use VS Code with the Julia extension to edit, format, and test your code. We do not recommend using other editors to edit your code for the time being.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"This extension already has JuliaFormatter integrated. So to format your code, follow the steps listed here.","category":"page"},{"location":"developers/style/#Design-principles","page":"Style Guide","title":"Design principles","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"We adopt some SciML design guidelines here. Please read it before contributing!","category":"page"},{"location":"developers/style/#Consistency-vs-Adherence","page":"Style Guide","title":"Consistency vs Adherence","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"According to PEP8:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"But most importantly: know when to be inconsistent – sometimes the style guide just doesn't apply. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don't hesitate to ask!","category":"page"},{"location":"developers/style/#Community-Contribution-Guidelines","page":"Style Guide","title":"Community Contribution Guidelines","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"For a comprehensive set of community contribution guidelines, refer to ColPrac. A relevant point to highlight PRs should do one thing. In the context of style, this means that PRs which update the style of a package's code should not be mixed with fundamental code contributions. This separation makes it easier to ensure that large style improvement are isolated from substantive (and potentially breaking) code changes.","category":"page"},{"location":"developers/style/#Open-source-contributions-are-allowed-to-start-small-and-grow-over-time","page":"Style Guide","title":"Open source contributions are allowed to start small and grow over time","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"If the standard for code contributions is that every PR needs to support every possible input type that anyone can think of, the barrier would be too high for newcomers. Instead, the principle is to be as correct as possible to begin with, and grow the generic support over time. All recommended functionality should be tested, any known generality issues should be documented in an issue (and with a @test_broken test when possible). However, a function which is known to not be GPU-compatible is not grounds to block merging, rather it is an encouragement for a follow-up PR to improve the general type support!","category":"page"},{"location":"developers/style/#Generic-code-is-preferred-unless-code-is-known-to-be-specific","page":"Style Guide","title":"Generic code is preferred unless code is known to be specific","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"For example, the code:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"function f(A, B)\n    for i in 1:length(A)\n        A[i] = A[i] + B[i]\n    end\nend","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"would not be preferred for two reasons. One is that it assumes A uses one-based indexing, which would fail in cases like OffsetArrays and FFTViews. Another issue is that it requires indexing, while not all array types support indexing (for example, CuArrays). A more generic compatible implementation of this function would be to use broadcast, for example:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"function f(A, B)\n    @. A = A + B\nend","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"which would allow support for a wider variety of array types.","category":"page"},{"location":"developers/style/#Internal-types-should-match-the-types-used-by-users-when-possible","page":"Style Guide","title":"Internal types should match the types used by users when possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"If f(A) takes the input of some collections and computes an output from those collections, then it should be expected that if the user gives A as an Array, the computation should be done via Arrays. If A was a CuArray, then it should be expected that the computation should be internally done using a CuArray (or appropriately error if not supported). For these reasons, constructing arrays via generic methods, like similar(A), is preferred when writing f instead of using non-generic constructors like Array(undef,size(A)) unless the function is documented as being non-generic.","category":"page"},{"location":"developers/style/#Trait-definition-and-adherence-to-generic-interface-is-preferred-when-possible","page":"Style Guide","title":"Trait definition and adherence to generic interface is preferred when possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Julia provides many interfaces, for example:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Iteration\nIndexing\nBroadcast","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Those interfaces should be followed when possible. For example, when defining broadcast overloads, one should implement a BroadcastStyle as suggested by the documentation instead of simply attempting to bypass the broadcast system via copyto! overloads.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"When interface functions are missing, these should be added to Base Julia or an interface package, like ArrayInterface.jl. Such traits should be declared and used when appropriate. For example, if a line of code requires mutation, the trait ArrayInterface.ismutable(A) should be checked before attempting to mutate, and informative error messages should be written to capture the immutable case (or, an alternative code which does not mutate should be given).","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"One example of this principle is demonstrated in the generation of Jacobian matrices. In many scientific applications, one may wish to generate a Jacobian cache from the user's input u0. A naive way to generate this Jacobian is J = similar(u0,length(u0),length(u0)). However, this will generate a Jacobian J such that J isa Matrix.","category":"page"},{"location":"developers/style/#Macros-should-be-limited-and-only-be-used-for-syntactic-sugar","page":"Style Guide","title":"Macros should be limited and only be used for syntactic sugar","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Macros define new syntax, and for this reason they tend to be less composable than other coding styles and require prior familiarity to be easily understood. One principle to keep in mind is, \"can the person reading the code easily picture what code is being generated?\". For example, a user of Soss.jl may not know what code is being generated by:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"@model (x, α) begin\n    σ ~ Exponential()\n    β ~ Normal()\n    y ~ For(x) do xj\n        Normal(α + β * xj, σ)\n    end\n    return y\nend","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"and thus using such a macro as the interface is not preferred when possible. However, a macro like @muladd is trivial to picture on a code (it recursively transforms a*b + c to muladd(a,b,c) for more accuracy and efficiency), so using such a macro for example:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"julia> @macroexpand(@muladd k3 = f(t + c3 * dt, @. uprev + dt * (a031 * k1 + a032 * k2)))\n:(k3 = f((muladd)(c3, dt, t), (muladd).(dt, (muladd).(a032, k2, (*).(a031, k1)), uprev)))","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"is recommended. Some macros in this category are:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"@inbounds\n@muladd\n@view\n@named\n@.\n@..","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Some performance macros, like @simd, @threads, or @turbo from LoopVectorization.jl, make an exception in that their generated code may be foreign to many users. However, they still are classified as appropriate uses as they are syntactic sugar since they do (or should) not change the behavior of the program in measurable ways other than performance.","category":"page"},{"location":"developers/style/#Errors-should-be-caught-as-high-as-possible,-and-error-messages-should-be-contextualized-for-newcomers","page":"Style Guide","title":"Errors should be caught as high as possible, and error messages should be contextualized for newcomers","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Whenever possible, defensive programming should be used to check for potential errors before they are encountered deeper within a package. For example, if one knows that f(u0,p) will error unless u0 is the size of p, this should be caught at the start of the function to throw a domain specific error, for example \"parameters and initial condition should be the same size\".","category":"page"},{"location":"developers/style/#Subpackaging-and-interface-packages-is-preferred-over-conditional-modules-via-Requires.jl","page":"Style Guide","title":"Subpackaging and interface packages is preferred over conditional modules via Requires.jl","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Requires.jl should be avoided at all costs. If an interface package exists, such as ChainRulesCore.jl for defining automatic differentiation rules without requiring a dependency on the whole ChainRules.jl system, or RecipesBase.jl which allows for defining Plots.jl plot recipes without a dependency on Plots.jl, a direct dependency on these interface packages is preferred.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Otherwise, instead of resorting to a conditional dependency using Requires.jl, it is preferred one creates subpackages, i.e. smaller independent packages kept within the same GitHub repository with independent versioning and package management. An example of this is seen in Optimization.jl which has subpackages like OptimizationBBO.jl for BlackBoxOptim.jl support.","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Some important interface packages to know about are:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"ChainRulesCore.jl\nRecipesBase.jl\nArrayInterface.jl\nCommonSolve.jl\nSciMLBase.jl","category":"page"},{"location":"developers/style/#Functions-should-either-attempt-to-be-non-allocating-and-reuse-caches,-or-treat-inputs-as-immutable","page":"Style Guide","title":"Functions should either attempt to be non-allocating and reuse caches, or treat inputs as immutable","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Mutating codes and non-mutating codes fall into different worlds. When a code is fully immutable, the compiler can better reason about dependencies, optimize the code, and check for correctness. However, many times a code making the fullest use of mutation can outperform even what the best compilers of today can generate. That said, the worst of all worlds is when code mixes mutation with non-mutating code. Not only is this a mishmash of coding styles, it has the potential non-locality and compiler proof issues of mutating code while not fully benefiting from the mutation.","category":"page"},{"location":"developers/style/#Out-Of-Place-and-Immutability-is-preferred-when-sufficient-performant","page":"Style Guide","title":"Out-Of-Place and Immutability is preferred when sufficient performant","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Mutation is used to get more performance by decreasing the amount of heap allocations. However, if it's not helpful for heap allocations in a given spot, do not use mutation. Mutation is scary and should be avoided unless it gives an immediate benefit. For example, if matrices are sufficiently large, then A*B is as fast as mul!(C,A,B), and thus writing A*B is preferred (unless the rest of the function is being careful about being fully non-allocating, in which case this should be mul! for consistency).","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Similarly, when defining types, using struct is preferred to mutable struct unless mutating the struct is a common occurrence. Even if mutating the struct is a common occurrence, see whether using Setfield.jl is sufficient. The compiler will optimize the construction of immutable structs, and thus this can be more efficient if it's not too much of a code hassle.","category":"page"},{"location":"developers/style/#Tests-should-attempt-to-cover-a-wide-gamut-of-input-types","page":"Style Guide","title":"Tests should attempt to cover a wide gamut of input types","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Code coverage numbers are meaningless if one does not consider the input types. For example, one can hit all the code with Array, but that does not test whether CuArray is compatible! Thus, it's always good to think of coverage not in terms of lines of code but in terms of type coverage. A good list of number types to think about are:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Float64\nFloat32\nComplex\nDual\nBigFloat","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Array types to think about testing are:","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Array\nOffsetArray\nCuArray","category":"page"},{"location":"developers/style/#When-in-doubt,-a-submodule-should-become-a-subpackage-or-separate-package","page":"Style Guide","title":"When in doubt, a submodule should become a subpackage or separate package","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Keep packages to one core idea. If there's something separate enough to be a submodule, could it instead be a separate well-tested and documented package to be used by other packages? Most likely yes.","category":"page"},{"location":"developers/style/#Globals-should-be-avoided-whenever-possible","page":"Style Guide","title":"Globals should be avoided whenever possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Global variables should be avoided whenever possible. When required, global variables should be constants and have an all uppercase name separated with underscores (e.g. MY_CONSTANT). They should be defined at the top of the file, immediately after imports and exports but before an __init__ function. If you truly want mutable global style behavior you may want to look into mutable containers.","category":"page"},{"location":"developers/style/#Type-stable-and-Type-grounded-code-is-preferred-wherever-possible","page":"Style Guide","title":"Type-stable and Type-grounded code is preferred wherever possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Type-stable and type-grounded code helps the compiler create not only more optimized code, but also faster to compile code. Always keep containers well-typed, functions specializing on the appropriate arguments, and types concrete.","category":"page"},{"location":"developers/style/#Closures-should-be-avoided-whenever-possible","page":"Style Guide","title":"Closures should be avoided whenever possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Closures can cause accidental type instabilities that are difficult to track down and debug; in the long run it saves time to always program defensively and avoid writing closures in the first place, even when a particular closure would not have been problematic. A similar argument applies to reading code with closures; if someone is looking for type instabilities, this is faster to do when code does not contain closures. Furthermore, if you want to update variables in an outer scope, do so explicitly with Refs or self defined structs. For example,","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"map(Base.Fix2(getindex, i), vector_of_vectors)","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"is preferred over","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"map(v -> v[i], vector_of_vectors)","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"or","category":"page"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"[v[i] for v in vector_of_vectors]","category":"page"},{"location":"developers/style/#Numerical-functionality-should-use-the-appropriate-generic-numerical-interfaces","page":"Style Guide","title":"Numerical functionality should use the appropriate generic numerical interfaces","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"While you can use A\\b to do a linear solve inside a package, that does not mean that you should. This interface is only sufficient for performing factorizations, and so that limits the scaling choices, the types of A that can be supported, etc. Instead, linear solves within packages should use LinearSolve.jl. Similarly, nonlinear solves should use NonlinearSolve.jl. Optimization should use Optimization.jl. This allows the full generic choice to be given to the user without depending on every solver package (effectively recreating the generic interfaces within each package).","category":"page"},{"location":"developers/style/#Functions-should-capture-one-underlying-principle","page":"Style Guide","title":"Functions should capture one underlying principle","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Functions mean one thing. Every dispatch of + should be \"the meaning of addition on these types\". While in theory you could add dispatches to + that mean something different, that will fail in generic code for which + means addition. Thus, for generic code to work, code needs to adhere to one meaning for each function. Every dispatch should be an instantiation of that meaning.","category":"page"},{"location":"developers/style/#Internal-choices-should-be-exposed-as-options-whenever-possible","page":"Style Guide","title":"Internal choices should be exposed as options whenever possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Whenever possible, numerical values and choices within scripts should be exposed as options to the user. This promotes code reusability beyond the few cases the author may have expected.","category":"page"},{"location":"developers/style/#Prefer-code-reuse-over-rewrites-whenever-possible","page":"Style Guide","title":"Prefer code reuse over rewrites whenever possible","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"If a package has a function you need, use the package. Add a dependency if you need to. If the function is missing a feature, prefer to add that feature to said package and then add it as a dependency. If the dependency is potentially troublesome, for example because it has a high load time, prefer to spend time helping said package fix these issues and add the dependency. Only when it does not seem possible to make the package \"good enough\" should using the package be abandoned. If it is abandoned, consider building a new package for this functionality as you need it, and then make it a dependency.","category":"page"},{"location":"developers/style/#Prefer-to-not-shadow-functions","page":"Style Guide","title":"Prefer to not shadow functions","text":"","category":"section"},{"location":"developers/style/","page":"Style Guide","title":"Style Guide","text":"Two functions can have the same name in Julia by having different namespaces. For example, X.f and Y.f can be two different functions, with different dispatches, but the same name. This should be avoided whenever possible. Instead of creating MyPackage.sort, consider adding dispatches to Base.sort for your types if these new dispatches match the underlying principle of the function. If it doesn't, prefer to use a different name. While using MyPackage.sort is not conflicting, it is going to be confusing for most people unfamiliar with your code, so MyPackage.special_sort would be more helpful to newcomers reading the code.","category":"page"}]
}
